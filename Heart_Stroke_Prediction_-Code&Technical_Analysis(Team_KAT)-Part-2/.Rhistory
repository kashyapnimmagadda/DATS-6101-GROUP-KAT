knitr::opts_chunk$set(echo = TRUE)
# Importing required libraries for the EDA.
library(ezids)
library(ggplot2)
library(ROSE)
library(tidyverse)
library(conflicted)
library(dplyr)
github_file_path <-
"https://raw.githubusercontent.com/kashyapnimmagadda/DATS-6101-GROUP-KAT/main/DataSet/framingham.csv"
stroke_df <- read.csv(url(github_file_path))
head(stroke_df, n = 2)
names(stroke_df)[names(stroke_df) == "TenYearCHD"] <- "stroke"
colnames(stroke_df)[1] <- "gender"
stroke_df$gender[stroke_df$gender == "0"] <- "F"
stroke_df$gender[stroke_df$gender == "1"] <- "M"
# converting the numeric variables to factor variables
stroke_df$gender <- as.factor(stroke_df$gender)
stroke_df$currentSmoker <- as.factor(stroke_df$currentSmoker)
stroke_df$BPMeds <- as.factor(stroke_df$BPMeds)
stroke_df$prevalentStroke <- as.factor(stroke_df$prevalentStroke)
stroke_df$prevalentHyp <- as.factor(stroke_df$prevalentHyp)
stroke_df$diabetes <- as.factor(stroke_df$diabetes)
stroke_df$stroke <- as.factor(stroke_df$stroke)
stroke_df$BMI <- as.numeric(stroke_df$BMI)
# To get the summary statistics of the dataset
summary(stroke_df)
paste("The NA's in the dataset is:", sum(is.na(stroke_df)))
# Replacing cigsPerDay NA values with mean value
stroke_df$cigsPerDay[is.na(stroke_df$cigsPerDay)] <-
mean(stroke_df$cigsPerDay, na.rm = TRUE)
# Replacing Education NA values with mean value
stroke_df$education[is.na(stroke_df$education)] <-
mean(stroke_df$education, na.rm = TRUE)
stroke_df$education <- as.integer(stroke_df$education)
# Replacing BPMeds NA values with mean value
# stroke_df$BPMeds[is.na(stroke_df$BPMeds)] = mean(stroke_df$BPMeds, na.rm = TRUE)
# stroke_df$BPMeds <- as.integer(stroke_df$BPMeds)
stroke_df$BPMeds[is.na(stroke_df$BPMeds)] <- 0
# Replacing HeartRate NA values with mean value
stroke_df$heartRate[is.na(stroke_df$heartRate)] <-
mean(stroke_df$heartRate, na.rm = TRUE)
# Replacing NA values with average BMI value
stroke_df$BMI[is.na(stroke_df$BMI)] <-
mean(stroke_df$BMI, na.rm = TRUE)
# Replacing NA values with average glucose value
stroke_df$glucose[is.na(stroke_df$glucose)] <-
mean(stroke_df$glucose, na.rm = TRUE)
# Replacing NA values with average totChol value
stroke_df$totChol[is.na(stroke_df$totChol)] <-
mean(stroke_df$totChol, na.rm = TRUE)
paste("The NA's in the dataset after replacing null values is:", sum(is.na(stroke_df)))
# To get the summary statistics of the dataset
xkablesummary(stroke_df,
title = "Table : Statistical Summary after cleaning",
pos = "center",
bso = "hover"
)
# subsetting the data for various analyses
stroke_1 <- subset(stroke_df, stroke == 1)
stroke_0 <- subset(stroke_df, stroke == 0)
stroke_1_female <- subset(stroke_df, stroke == 1 & gender == "F")
stroke_1_male <- subset(stroke_df, stroke == 1 & gender == "M")
# creating different columns for bmi, age and average_glucose_level based on different bucketing for each variables
dat <- within(stroke_df, {
BMI.cat <- NA # need to initialize variable
BMI.cat[BMI < 18.5] <- "underweight"
BMI.cat[BMI >= 18.5 & BMI < 25] <- "normal"
BMI.cat[BMI >= 25 & BMI < 30] <- "overweight"
BMI.cat[BMI >= 30 & BMI < 40] <- "obesity"
BMI.cat[BMI >= 40] <- "severe obesity"
gluc.cat <- NA # need to initialize variable
gluc.cat[glucose < 60] <- "Below 60"
gluc.cat[glucose >= 60 & glucose < 90] <- "60 - 90"
gluc.cat[glucose >= 90 & glucose < 120] <- "90 - 120"
gluc.cat[glucose >= 120 & glucose < 180] <- "120 - 180"
gluc.cat[glucose >= 180 & glucose < 273] <- "180 - 273"
gluc.cat[glucose >= 273] <- "Beyond 273"
age.cat <- NA
age.cat[age <= 20] <- "Under 20"
age.cat[age >= 21 & age <= 40] <- "20-40"
age.cat[age >= 41 & age <= 60] <- "40-60"
age.cat[age >= 61 & age <= 80] <- "60-80"
age.cat[age >= 80] <- "above 80"
})
dat$BMI.cat <-
factor(
dat$BMI.cat,
levels = c(
"underweight",
"normal",
"overweight",
"obesity",
"severe obesity"
)
)
dat$gluc.cat <-
factor(dat$gluc.cat,
levels = c("Below 60", "60 - 90", "90 - 120", "120 - 180", "180 - 273")
)
dat$age.cat <-
factor(dat$age.cat,
levels = c("Under 20", "20-40", "40-60", "60-80", "above 80")
)
dat_1 <- subset(dat, stroke == 1)
# Shapiro test to check data distribution
shapiro.test(stroke_df$age)
# Age variable transformation
stroke_df$age <- log(stroke_df$age)
shapiro.test(stroke_df$age)
ggplot(stroke_df, aes(x = age)) +
geom_density(
fill = "skyblue",
color = "skyblue",
alpha = 0.5
) +
theme_bw() +
theme() +
ggtitle("Distribution for age")
ggplot(stroke_df, aes(x = age)) +
geom_density(
fill = "skyblue",
color = "skyblue",
alpha = 0.5
) +
theme_bw() +
theme() +
ggtitle("Distribution for age")
ggplot(stroke_df, aes(x = BMI)) +
geom_density(
fill = "blue",
color = "blue",
alpha = 0.5
) +
theme_bw() +
theme() +
ggtitle("Distribution for BMI")
ggplot(stroke_df, aes(x = glucose)) +
geom_density(
fill = "brown",
color = "brown",
alpha = 0.5
) +
ggtitle("Distribution for Glucose Level") +
theme_bw() +
theme()
ggplot(stroke_df, aes(x = gender, fill = gender)) +
geom_bar() +
ggtitle("Count of Male and Female in the Dataset") +
theme_bw() +
theme() +
xlab("Gender") +
ylab("Count of people") +
scale_fill_discrete(name = "gender", labels = c("F - Female", "M - Male"))
ggplot(stroke_df, aes(x = stroke)) +
geom_bar(aes(fill = ..count..)) +
scale_fill_gradient("Count", low = "#F0E442", high = "#999999") +
labs(x = "stroke", y = "Count of People", title = "Distribution of Target variable (stroke)")
ggplot(stroke_1, aes(x = BMI,
fill = stroke)) +
geom_histogram(
color = "#e9ecef",
alpha = 0.6,
position = "identity",
) +
theme_bw() +
theme() +
ggtitle("BMI vs Stroke") +
scale_fill_discrete(name = "stroke", labels = c("1 - Yes"))
# seeing if gender has any affect on stroke based on smoking and Age
ggplot(stroke_1_female, aes(x = age, fill = currentSmoker)) +
geom_bar(position = "dodge") +
ggtitle("Distribution of females who had a stroke based on their smoking habits") +
theme_bw() +
theme() +
xlab("Age") +
ylab("Count of people ")
ggplot(stroke_1_male, aes(x = age, fill = currentSmoker)) +
geom_bar(position = "dodge") +
ggtitle("Distribution of males who had a stroke based on their smoking habits") +
theme_bw() +
theme() +
xlab("Age") +
ylab("Count of people ")
# seeing if age has effect in stroke
ggplot(stroke_1, aes(x = age, fill = stroke)) +
geom_density(alpha = 0.3) +
ggtitle("Density plot for age of people who had stroke") +
theme_bw() +
theme() +
scale_fill_discrete(name = "stroke", labels = c("1 - Yes"))
# how bmi and age is stroke in people
ggplot(stroke_1, aes(x = BMI, y = age, color = stroke)) +
geom_boxplot(size = 3) +
ggtitle("Scatter plot for age vs bmi for people who had a stroke") +
scale_fill_discrete(name = "stroke", labels = c("1 - Yes"))
dat_1 <- subset(dat, stroke == 1)
# boxplot to see if bmi along with age has anything to do with stroke
ggplot(dat_1, aes(x = BMI.cat, y = age, fill = stroke)) +
geom_boxplot() +
ggtitle("Boxplot for Age vs BMI(categorical)") +
scale_fill_discrete(name = "stroke", labels = c("1 - Yes"))
# seeing if average glucose level with age has an effect on stroke
ggplot(dat_1, aes(fill = stroke, y = age, x = gluc.cat)) +
geom_boxplot() +
ggtitle("Boxplot for Age vs Gluclose level(Categorical) for people with stroke") +
scale_fill_discrete(name = "stroke", labels = c("1 - Yes"))
# seeing if a person can get hypertension with age
ggplot(data = stroke_1, aes(
x = as.character(prevalentHyp),
y = age,
fill = stroke
)) +
geom_boxplot() +
labs(title = "Age distribution by hypertension", x = "hypertension", y = "age") +
scale_fill_discrete(name = "stroke", labels = c("1 - Yes"))
# BMI category vs stroke count
ggplot(dat_1, aes(x = BMI.cat, fill = stroke)) +
geom_bar() +
labs(x = "BMI Category", y = "Count", title = "Distribution of Stroke Cases by BMI Category") +
scale_fill_discrete(name = "stroke", labels = c("1 - Yes"))
ggplot(stroke_1, aes(x = age, fill = stroke)) +
geom_histogram(binwidth = 5, position = "dodge") +
labs(x = "Age", y = "Count", title = "Distribution of Age by Stroke Status") +
scale_x_continuous(breaks = seq(0, 100, by = 5)) +
scale_fill_discrete(name = "stroke", labels = c("1 - Yes"))
ggplot(stroke_1, aes(x = BMI, y = glucose, color = stroke)) +
geom_point(alpha = 0.7) +
labs(x = "BMI", y = "Glucose Level", title = "Relationship between BMI and Glucose Levels who had stroke") +
scale_color_manual(values = c("lightblue", "red")) +
scale_color_discrete(name = "stroke", labels = c("1 - Yes"))
ggplot(dat_1, aes(x = sysBP, y = diaBP, color = age)) +
geom_point() +
labs(
title = "Scatter plot of systolic vs diastolic blood pressure of people who had stroke",
x = "Systolic BP",
y = "Diastolic BP",
color = "Age"
) +
scale_color_gradient(low = "blue", high = "red")
gender_chi_res <- chisq.test(stroke_df$stroke, stroke_df$gender)
gender_chi_res
currentSmoker_chi_res <- chisq.test(stroke_df$stroke, stroke_df$currentSmoker)
currentSmoker_chi_res
prevalentStroke_chi_res <- chisq.test(stroke_df$stroke, stroke_df$prevalentStroke)
prevalentStroke_chi_res
prevalentHyp_chi_res <- chisq.test(stroke_df$stroke, stroke_df$prevalentHyp)
prevalentHyp_chi_res
diabetes_chi_res <- chisq.test(stroke_df$stroke, stroke_df$diabetes)
diabetes_chi_res
totChol_t_test <- t.test(totChol ~ stroke, data = stroke_df)
totChol_t_test
sysBP_t_test <- t.test(sysBP ~ stroke, data = stroke_df)
sysBP_t_test
diaBP_t_test <- t.test(diaBP ~ stroke, data = stroke_df)
diaBP_t_test
BMI_t_test <- t.test(BMI ~ stroke, data = stroke_df)
BMI_t_test
age_t_test <- t.test(age ~ stroke, data = stroke_df)
age_t_test
glucose_t_test <- t.test(glucose ~ stroke, data = stroke_df)
glucose_t_test
library(DMwR)
library(caret)
library(ROSE)
library(car)
set.seed(123)
train_index <- createDataPartition(stroke_df$stroke, p = 0.7,
list = FALSE, times = 1)
train_data <- stroke_df[train_index, ]
test_data <- stroke_df[-train_index, ]
# Count the number of observations in each class before SMOTE
table(train_data$stroke)
# Apply SMOTE to balance the classes
train_data_balanced <- SMOTE(stroke ~ .,
train_data,
perc.over = 300,
perc.under = 100)
# Count the number of observations in each class after SMOTE
table(train_data_balanced$stroke)
nrow(train_data_balanced)
set.seed(123)
train_index <- createDataPartition(stroke_df$stroke, p = 0.7,
list = FALSE, times = 1)
train_data <- stroke_df[train_index, ]
test_data <- stroke_df[-train_index, ]
# Count the number of observations in each class before SMOTE
table(train_data$stroke)
# Apply SMOTE to balance the classes
train_data_balanced <- SMOTE(stroke ~ .,
train_data,
perc.over = 300,
perc.under = 100)
# Count the number of observations in each class after SMOTE
table(train_data_balanced$stroke)
nrow(train_data_balanced)
# Count the number of observations in each class before SMOTE
table(test_data$stroke)
# Apply SMOTE to balance the classes
test_data_balanced <- SMOTE(stroke ~ .,
test_data,
perc.over = 300,
perc.under = 100)
# Count the number of observations in each class after SMOTE
table(test_data_balanced$stroke)
nrow(test_data_balanced)
vif(log_corr_model)
# Fit a logistic regression model to the training data
log_corr_model <- glm(stroke ~ diaBP + sysBP + age + BMI,
family = binomial,
data = train_data)
print(summary(log_corr_model))
# Make predictions on the testing data
test_preds <- predict(log_corr_model,
newdata = test_data,
type = "response")
# Calculate the accuracy of the model
test_preds_acc <- ifelse(test_preds > 0.5, 1, 0)
vif(log_corr_model)
# create confusion matrix
confusion_mat <- confusionMatrix(factor(test_preds_acc, levels = c(0, 1)),
factor(test_data$stroke, levels = c(0, 1)))
# print the confusion matrix
confusion_mat$table
# print accuracy
accuracy <- confusion_mat$overall['Accuracy']
print(paste("Accuracy: ", round(accuracy, 4) * 100, "%"))
# print precision
precision <- confusion_mat$byClass['Pos Pred Value']
print(paste("Precision: ", round(precision, 4) * 100, "%"))
# print recall (sensitivity)
sensitivity <- confusion_mat$byClass['Sensitivity']
print(paste("Recall (Sensitivity): ", round(sensitivity, 4) * 100, "%"))
# print specificity
specificity <- confusion_mat$byClass['Specificity']
print(paste("Specificity: ", round(specificity, 4) * 100, "%"))
# print F1 score
f1_score <- 2 * (confusion_mat$byClass['Pos Pred Value'] * confusion_mat$byClass['Sensitivity']) / (confusion_mat$byClass['Pos Pred Value'] + confusion_mat$byClass['Sensitivity'])
print(paste("F1 Score: ", round(f1_score, 4) * 100, "%"))
# Fit a logistic regression full model to the training data
log_full_model <- glm(stroke ~ .,
family = binomial,
data = train_data)
print(summary(log_full_model))
# Make predictions on the testing data
test_full_preds <- predict(log_full_model,
newdata = test_data,
type = "response")
# Calculate the accuracy of the model
test_full_preds_acc <- ifelse(test_full_preds > 0.5, 1, 0)
# Fit a logistic regression full model to the training data
log_full_model <- glm(stroke ~ .,
family = binomial,
data = train_data)
print(summary(log_full_model))
# Make predictions on the testing data
test_full_preds <- predict(log_full_model,
newdata = test_data,
type = "response")
# Calculate the accuracy of the model
test_full_preds_acc <- ifelse(test_full_preds > 0.5, 1, 0)
vif(log_full_model)
